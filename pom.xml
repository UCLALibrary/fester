<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>fester</artifactId>
  <version>${revision}</version>
  <name>Fester</name>
  <description>A read/write interface for storing and retrieving IIIF manifests</description>
  <url>https://github.com/uclalibrary/fester</url>

  <licenses>
    <license>
      <name>The 3-Clause BSD License</name>
      <url>https://opensource.org/licenses/BSD-3-clause</url>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:uclalibrary/fester.git</connection>
    <developerConnection>scm:git:git@github.com:uclalibrary/fester.git</developerConnection>
    <url>git@github.com:uclalibrary/fester.git</url>
  </scm>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/uclalibrary/fester/issues</url>
  </issueManagement>

  <developers>
    <developer>
      <id>ksclarke</id>
      <name>Kevin S. Clarke</name>
      <email>ksclarke@ksclarke.io</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/New_York</timezone>
    </developer>
    <developer>
      <id>hardyoyo</id>
      <name>Hardy Pottinger</name>
      <email>hardy.pottinger@gmail.com</email>
      <timezone>America/Chicago</timezone>
    </developer>
    <developer>
      <id>cachemeoutside</id>
      <name>Anthony Vuong</name>
      <email>avuong@cachemeoutside.io</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/Los_Angeles</timezone>
    </developer>
    <developer>
      <id>markmatney</id>
      <name>Mark A. Matney, Jr.</name>
      <email>mmatney@library.ucla.edu</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/Los_Angeles</timezone>
    </developer>
    <developer>
      <id>DRickard</id>
      <name>David Rickard</name>
      <email>drickard1967@library.ucla.edu</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/Los_Angeles</timezone>
    </developer>
  </developers>

  <properties>
    <!-- Docker image dependencies -->
    <ubuntu.tag>20.04</ubuntu.tag>
    <jdk.version>11.0.11+9-0ubuntu2~20.04</jdk.version>
    <python3.version>3.8.2-0ubuntu2</python3.version>
    <curl.version>7.68.0-1ubuntu2.5</curl.version>

    <!-- Application dependencies -->
    <vertx.version>3.9.4</vertx.version>
    <opencsv.version>5.0</opencsv.version>
    <moirai.version>2.0.0</moirai.version>
    <slf4j.ext.version>1.7.26</slf4j.ext.version>
    <jcl.over.slf4j.version>1.7.30</jcl.over.slf4j.version>
    <commons.lang.version>3.9</commons.lang.version>
    <freelib.utils.version>1.1.0</freelib.utils.version>
    <freelib.maven.version>0.1.0</freelib.maven.version>
    <vertx.super.s3.version>1.3.3</vertx.super.s3.version>
    <jiiify.presentation.v2.version>0.5.5</jiiify.presentation.v2.version>
    <jiiify.presentation.v3.version>0.8.0</jiiify.presentation.v3.version>
    <alphanumeric.comparator.version>1.4.1</alphanumeric.comparator.version>

    <!-- Exclusions/Replacements -->
    <snakeyaml.version>1.26</snakeyaml.version>
    <commons.codec.version>1.14</commons.codec.version>

    <!-- Versions of tools used for testing -->
    <jsoup.version>1.13.1</jsoup.version>
    <aws.sdk.version>1.12.1</aws.sdk.version>
    <testcontainers.version>1.15.1</testcontainers.version>
    <jcip.annotations.version>1.0-1</jcip.annotations.version>

    <!-- Build plug-in versions -->
    <exec.plugin.version>3.0.0</exec.plugin.version>
    <shade.plugin.version>2.4.3</shade.plugin.version>
    <deploy.plugin.version>2.8.2</deploy.plugin.version>
    <netty.epoll.version>4.1.37.Final</netty.epoll.version>
    <vertx.plugin.version>1.0.18</vertx.plugin.version>
    <codacy.plugin.version>1.2.0</codacy.plugin.version>
    <xml.maven.plugin.version>1.0.2</xml.maven.plugin.version>
    <docker.maven.plugin.version>0.33.0</docker.maven.plugin.version>

    <!-- Name of the main Vert.x verticle -->
    <main.verticle>edu.ucla.library.iiif.fester.verticles.MainVerticle</main.verticle>

    <!-- Whether the test instances started with the 'live' profile reloads code automatically -->
    <live.test.reloads>false</live.test.reloads>

    <!-- These properties provide the ability to override the running of any type of test -->
    <skipITs>false</skipITs>
    <skipFTs>false</skipFTs>
    <skipUTs>false</skipUTs>
    <skipFfTs>false</skipFfTs>

    <!-- Whether we want the container logs to be visible when we run our tests (useful for debugging) -->
    <seeLogsFT>false</seeLogsFT>
    <seeLogsIT>false</seeLogsIT>
    <seeLogsFfT>false</seeLogsFfT>

    <!-- What level of logging we want to see, by default, in our tests and default container config -->
    <logLevel>ERROR</logLevel>
    <testLogLevel>ERROR</testLogLevel>

    <!-- AWS configuration properties -->
    <fester.s3.region>us-east-1</fester.s3.region>
    <fester.s3.bucket>iiif-fester</fester.s3.bucket>
    <fester.s3.access_key>YOUR_ACCESS_KEY</fester.s3.access_key>
    <fester.s3.secret_key>YOUR_SECRET_KEY</fester.s3.secret_key>

    <!-- Don't touch below unless you are using something other than S3 -->
    <fester.s3.endpoint>https://s3.amazonaws.com</fester.s3.endpoint>

    <!-- The IIIF base URL (including service prefix) -->
    <iiif.base.url>https://iiif.library.ucla.edu/iiif/2</iiif.base.url>

    <!-- The URL Fester is available at -->
    <fester.url>http://localhost:${fester.http.port}</fester.url>

    <!-- The missing image placeholder URL -->
    <fester.placeholder.url>https://iiif.library.ucla.edu/iiif/2/blank</fester.placeholder.url>

    <!-- The port Fester listens on -->
    <fester.http.port>8888</fester.http.port>

    <!-- String that should be present in A/V access URLs -->
    <fester.av.string>https://wowza.library.ucla.edu/iiif_av_public/definst/mp4</fester.av.string>

    <!-- Comma-separated list of strings to fill any A/V access URL template strings with -->
    <fester.av.string.exts>/manifest.mpd,/playlist.m3u8</fester.av.string.exts>

    <!-- The version of Festerize that is compatible with this version of Fester -->
    <festerize.version>0.2.0</festerize.version>

    <!-- The port a debugger may attach to when Fester is running in debug mode -->
    <fester.debug.port>5555</fester.debug.port>

    <!-- The port a debugger may listen on to debug a containerized Fester instance -->
    <jdwp.host.port>5556</jdwp.host.port>

    <!-- The JDWP configuration for debugging a containerized Fester instance; see "debug" profile -->
    <jdwp.client.config/>

    <!-- The Docker registry user and password used for publishing images -->
    <docker.registry.username/>
    <docker.registry.password/>
    <!-- The Docker registry account, if supplied, must end with a slash (e.g. "account/") -->
    <docker.registry.account/>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>testcontainers-bom</artifactId>
        <version>${testcontainers.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

    <!-- Vert.x is a toolkit for building reactive applications on the JVM -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-client</artifactId>
      <version>${vertx.version}</version>
    </dependency>

    <!-- Feature flag library -->
    <dependency>
      <groupId>com.nike.moirai</groupId>
      <artifactId>moirai-core</artifactId>
      <version>${moirai.version}</version>
    </dependency>
    <dependency>
      <groupId>com.nike.moirai</groupId>
      <artifactId>moirai-typesafeconfig</artifactId>
      <version>${moirai.version}</version>
    </dependency>

    <!-- Library for working with v.2 and v.3 IIIF manifests -->
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>jiiify-presentation-v2</artifactId>
      <version>${jiiify.presentation.v2.version}</version>
    </dependency>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>jiiify-presentation-v3</artifactId>
      <version>${jiiify.presentation.v3.version}</version>
    </dependency>

    <!-- OpenAPI for Vert.x - https://vertx.io/docs/vertx-web-api-contract/java/ -->
    <dependency>
      <groupId>org.yaml</groupId>
      <artifactId>snakeyaml</artifactId>
      <version>${snakeyaml.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-api-contract</artifactId>
      <version>${vertx.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.yaml</groupId>
          <artifactId>snakeyaml</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Below is a dependency that needs updating due to security issue (may be able to remove in future) -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-ext</artifactId>
      <version>${slf4j.ext.version}</version>
    </dependency>

    <!-- A Vert.x plug-in for more flexible configuration control -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-config</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>freelib-utils</artifactId>
      <version>${freelib.utils.version}</version>
    </dependency>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>vertx-super-s3</artifactId>
      <version>${vertx.super.s3.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>${opencsv.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${commons.lang.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>${commons.codec.version}</version>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-s3</artifactId>
      <version>${aws.sdk.version}</version>
      <exclusions>
        <exclusion>
          <groupId>commons-codec</groupId>
          <artifactId>commons-codec</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>se.sawano.java</groupId>
      <artifactId>alphanumeric-comparator</artifactId>
      <version>${alphanumeric.comparator.version}</version>
    </dependency>
    <dependency>
      <groupId>org.jsoup</groupId>
      <artifactId>jsoup</artifactId>
      <version>${jsoup.version}</version>
    </dependency>

    <!-- Below dependencies only used for testing -->
    <dependency>
      <groupId>com.github.stephenc.jcip</groupId>
      <artifactId>jcip-annotations</artifactId>
      <version>${jcip.annotations.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-unit</artifactId>
      <version>${vertx.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>localstack</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Allows us to suppress warnings from the AWS SDK (see https://github.com/aws/aws-sdk-java/issues/1707) -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>${jcl.over.slf4j.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>

      <!-- We can also override the default logging configuration with a file in our root project directory -->
      <testResource>
        <directory>${basedir}</directory>
        <includes>
          <include>logback-test.xml</include>
        </includes>
        <filtering>true</filtering>
      </testResource>
    </testResources>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>

      <!-- Disable standard deploy; we publish a Docker image, not Jar file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>${deploy.plugin.version}</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- The build-helper plug-in gets us a dynamic port for testing -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>

      <!--<![CDATA[
        To run the generate-codes plugin outside of a full build, run:
         mvn info.freelibrary:freelib-utils:generate-codes -DmessageFiles=src/main/resources/fester_messages.xml
        Bash shell users can run the shorter form:
         mvn info.freelibrary:freelib-utils:generate-codes -DmessageFiles=$(find src -name *_messages.xml)
      ]]>-->
      <plugin>
        <groupId>info.freelibrary</groupId>
        <artifactId>freelib-maven-plugins</artifactId>
        <version>${freelib.maven.version}</version>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>generate-codes</goal>
            </goals>
            <configuration>
              <generatedSourcesDirectory>${project.basedir}/src/main/generated</generatedSourcesDirectory>
              <messageFiles>
                <messageFile>${project.basedir}/src/main/resources/fester_messages.xml</messageFile>
              </messageFiles>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-web-resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/classes/webroot</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/webroot</directory>
                </resource>
                <resource>
                  <directory>${basedir}/target/classes</directory>
                  <includes>
                    <include>fester.yaml</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- PMD is an extensible cross-language static code analyzer -->
      <plugin>
        <artifactId>maven-pmd-plugin</artifactId>
      </plugin>

      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>info.freelibrary</groupId>
            <artifactId>freelib-resources</artifactId>
            <version>${freelib.resources.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <additionalJOptions>
            <additionalJOption>-J-Dhttp.agent=maven-javadoc-plugin-${project.name}</additionalJOption>
          </additionalJOptions>
          <links>
            <link>https://vertx.io/docs/${vertx.version}/apidocs/</link>
          </links>
          <sourcepath>src/main/java:src/main/generated</sourcepath>
        </configuration>
        <executions>
          <execution>
            <id>site-javadocs</id>
            <phase>site</phase>
            <goals>
              <goal>javadoc</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Checkstyle ensures adherence to coding standards -->
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>

      <!-- Enforcer enforces some basic characteristics of the project -->
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-java</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <version>[1.11.0,)</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Maven dependency helps freelib-resources copy files into the project -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>

      <!-- The Vert.x plug-in enables running the application from within Maven for development -->
      <plugin>
        <groupId>io.reactiverse</groupId>
        <artifactId>vertx-maven-plugin</artifactId>
        <version>${vertx.plugin.version}</version>
        <executions>
          <execution>
            <id>vertx-plugin</id>
            <goals>
              <goal>initialize</goal>
              <goal>package</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <verticle>${main.verticle}</verticle>
          <redeploy>${live.test.reloads}</redeploy>
          <runArgs>
            <runArg>-Dvertx-config-path=${project.basedir}/target/test-classes/test-config.properties</runArg>
            <runArg>-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory</runArg>
            <runArg>-Dcontent.types.user.table=src/main/docker/configs/content-types.properties</runArg>
          </runArgs>
        </configuration>
      </plugin>

      <!-- The shade plug-in generates an all-in-one executable Jar file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${shade.plugin.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>io.vertx.core.Launcher</Main-Class>
                    <Main-Verticle>${main.verticle}</Main-Verticle>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>
                </transformer>
              </transformers>
              <artifactSet>
                <!-- Exclude duplicate dependencies so we don't see the warning messages; alphabetize! -->
                <excludes>
                  <exclude>aopalliance:aopalliance</exclude>
                  <exclude>ch.qos.cal10n:cal10n-api</exclude>
                  <exclude>ch.qos.logback:logback-classic</exclude>
                  <exclude>ch.qos.logback:logback-core</exclude>
                  <exclude>com.amazonaws:aws-java-sdk-core</exclude>
                  <exclude>com.amazonaws:aws-java-sdk-kms</exclude>
                  <exclude>com.amazonaws:aws-java-sdk-s3</exclude>
                  <exclude>com.amazonaws:jmespath-java</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-annotations</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-core</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-databind</exclude>
                  <exclude>com.fasterxml.jackson.dataformat:jackson-dataformat-cbor</exclude>
                  <exclude>com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</exclude>
                  <exclude>com.fasterxml.jackson.datatype:jackson-datatype-jdk8</exclude>
                  <exclude>com.fasterxml.jackson.datatype:jackson-datatype-jsr310</exclude>
                  <exclude>com.github.dblock:oshi-core</exclude>
                  <exclude>com.github.dpaukov:combinatoricslib3</exclude>
                  <exclude>com.github.fge:btf</exclude>
                  <exclude>com.github.fge:jackson-coreutils</exclude>
                  <exclude>com.github.fge:json-patch</exclude>
                  <exclude>com.github.fge:msg-simple</exclude>
                  <exclude>com.github.fge:uri-template</exclude>
                  <exclude>com.github.java-json-tools:json-schema-core</exclude>
                  <exclude>com.github.java-json-tools:json-schema-validator</exclude>
                  <exclude>com.github.tkurz:media-fragments-uri</exclude>
                  <exclude>com.google.code.findbugs:jsr305</exclude>
                  <exclude>com.google.errorprone:error_prone_annotations</exclude>
                  <exclude>com.google.guava:failureaccess</exclude>
                  <exclude>com.google.guava:guava</exclude>
                  <exclude>com.google.inject:guice</exclude>
                  <exclude>com.google.j2objc:j2objc-annotations</exclude>
                  <exclude>com.googlecode.libphonenumber:libphonenumber</exclude>
                  <exclude>com.networknt:json-schema-validator</exclude>
                  <exclude>com.nike.moirai:moirai-core</exclude>
                  <exclude>com.nike.moirai:moirai-typesafeconfig</exclude>
                  <exclude>com.typesafe:config</exclude>
                  <exclude>commons-beanutils:commons-beanutils</exclude>
                  <exclude>commons-collections:commons-collections</exclude>
                  <exclude>commons-codec:commons-codec</exclude>
                  <exclude>commons-io:commons-io</exclude>
                  <exclude>commons-logging:commons-logging</exclude>
                  <exclude>info.freelibrary:freelib-utils</exclude>
                  <exclude>info.freelibrary:jiiify-presentation-v2</exclude>
                  <exclude>info.freelibrary:jiiify-presentation-v3</exclude>
                  <exclude>info.freelibrary:vertx-pairtree</exclude>
                  <exclude>info.freelibrary:vertx-super-s3</exclude>
                  <exclude>io.netty:netty-buffer</exclude>
                  <exclude>io.netty:netty-codec-dns</exclude>
                  <exclude>io.netty:netty-codec-http2</exclude>
                  <exclude>io.netty:netty-codec-http</exclude>
                  <exclude>io.netty:netty-codec-socks</exclude>
                  <exclude>io.netty:netty-codec</exclude>
                  <exclude>io.netty:netty-common</exclude>
                  <exclude>io.netty:netty-handler-proxy</exclude>
                  <exclude>io.netty:netty-handler</exclude>
                  <exclude>io.netty:netty-resolver-dns</exclude>
                  <exclude>io.netty:netty-resolver</exclude>
                  <exclude>io.netty:netty-transport</exclude>
                  <exclude>io.netty:netty-transport-native-epoll</exclude>
                  <exclude>io.netty:netty-transport-native-unix-common</exclude>
                  <exclude>io.swagger.core.v3:swagger-annotations</exclude>
                  <exclude>io.swagger.core.v3:swagger-core</exclude>
                  <exclude>io.swagger.core.v3:swagger-models</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser-core</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser-v2-converter</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser-v3</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser</exclude>
                  <exclude>io.swagger:swagger-annotations</exclude>
                  <exclude>io.swagger:swagger-compat-spec-parser</exclude>
                  <exclude>io.swagger:swagger-core</exclude>
                  <exclude>io.swagger:swagger-models</exclude>
                  <exclude>io.swagger:swagger-parser</exclude>
                  <exclude>io.vertx:vertx-auth-common</exclude>
                  <exclude>io.vertx:vertx-bridge-common</exclude>
                  <exclude>io.vertx:vertx-config</exclude>
                  <exclude>io.vertx:vertx-core</exclude>
                  <exclude>io.vertx:vertx-web-api-contract</exclude>
                  <exclude>io.vertx:vertx-web-client</exclude>
                  <exclude>io.vertx:vertx-web-common</exclude>
                  <exclude>io.vertx:vertx-web</exclude>
                  <exclude>jakarta.activation:jakarta.activation-api</exclude>
                  <exclude>jakarta.xml.bind:jakarta.xml.bind-api</exclude>
                  <exclude>jakarta.validation:jakarta.validation-api</exclude>
                  <exclude>javax.activation:activation</exclude>
                  <exclude>javax.activation:javax.activation-api</exclude>
                  <exclude>javax.annotation:jsr250-api</exclude>
                  <exclude>javax.enterprise:cdi-api</exclude>
                  <exclude>javax.inject:javax.inject</exclude>
                  <exclude>javax.mail:mailapi</exclude>
                  <exclude>javax.validation:validation-api</exclude>
                  <exclude>javax.xml.bind:jaxb-api</exclude>
                  <exclude>joda-time:joda-time</exclude>
                  <exclude>net.iharder:base64</exclude>
                  <exclude>net.java.dev.jna:jna-platform</exclude>
                  <exclude>net.java.dev.jna:jna</exclude>
                  <exclude>net.sf.jopt-simple:jopt-simple</exclude>
                  <exclude>org.apache.commons:commons-collections4</exclude>
                  <exclude>org.apache.commons:commons-lang3</exclude>
                  <exclude>org.apache.commons:commons-text</exclude>
                  <exclude>org.apache.httpcomponents:httpclient</exclude>
                  <exclude>org.apache.httpcomponents:httpcore</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-api</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-impl</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-provider</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-spi</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-util</exclude>
                  <exclude>org.apache.maven.shared:maven-shared-utils</exclude>
                  <exclude>org.apache.maven:maven-artifact</exclude>
                  <exclude>org.apache.maven:maven-builder-support</exclude>
                  <exclude>org.apache.maven:maven-core</exclude>
                  <exclude>org.apache.maven:maven-model-builder</exclude>
                  <exclude>org.apache.maven:maven-model</exclude>
                  <exclude>org.apache.maven:maven-plugin-api</exclude>
                  <exclude>org.apache.maven:maven-repository-metadata</exclude>
                  <exclude>org.apache.maven:maven-resolver-provider</exclude>
                  <exclude>org.apache.maven:maven-settings-builder</exclude>
                  <exclude>org.apache.maven:maven-settings</exclude>
                  <exclude>org.checkerframework:checker-qual</exclude>
                  <exclude>org.codehaus.mojo:animal-sniffer-annotations</exclude>
                  <exclude>org.codehaus.plexus:plexus-classworlds</exclude>
                  <exclude>org.codehaus.plexus:plexus-component-annotations</exclude>
                  <exclude>org.codehaus.plexus:plexus-interpolation</exclude>
                  <exclude>org.codehaus.plexus:plexus-utils</exclude>
                  <exclude>org.eclipse.sisu:org.eclipse.sisu.inject</exclude>
                  <exclude>org.eclipse.sisu:org.eclipse.sisu.plexus.site</exclude>
                  <exclude>org.eclipse.sisu:org.eclipse.sisu.plexus</exclude>
                  <exclude>org.glassfish:javax.json</exclude>
                  <exclude>org.jboss.forge.roaster:roaster-api</exclude>
                  <exclude>org.jboss.forge.roaster:roaster-jdt</exclude>
                  <exclude>org.jsoup:jsoup</exclude>
                  <exclude>org.mozilla:rhino</exclude>
                  <exclude>com.opencsv:opencsv</exclude>
                  <exclude>com.sndyuk:logback-more-appenders</exclude>
                  <exclude>net.jodah:failsafe</exclude>
                  <exclude>org.jruby.jcodings:jcodings</exclude>
                  <exclude>org.jruby.joni:joni</exclude>
                  <exclude>org.komamitsu:fluency-core</exclude>
                  <exclude>org.komamitsu:fluency-fluentd</exclude>
                  <exclude>org.komamitsu:phi-accural-failure-detector</exclude>
                  <exclude>org.msgpack:jackson-dataformat-msgpack</exclude>
                  <exclude>org.msgpack:msgpack-core</exclude>
                  <exclude>org.slf4j:jcl-over-slf4j</exclude>
                  <exclude>org.slf4j:slf4j-api</exclude>
                  <exclude>org.slf4j:slf4j-ext</exclude>
                  <exclude>org.sonatype.plexus:plexus-cipher</exclude>
                  <exclude>org.sonatype.plexus:plexus-sec-dispatcher</exclude>
                  <exclude>org.yaml:snakeyaml</exclude>
                  <exclude>se.sawano.java:alphanumeric-comparator</exclude>
                  <exclude>software.amazon.ion:ion-java</exclude>
                  <exclude>uk.co.lucasweb:aws-v4-signer-java</exclude>
                </excludes>
              </artifactSet>
              <outputFile>${project.build.directory}/build-artifact/${project.artifactId}-${project.version}.jar</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Check the project's XML files to make sure they are well-formed -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>xml-maven-plugin</artifactId>
        <version>${xml.maven.plugin.version}</version>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>validate</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <validationSets>
            <validationSet>
              <dir>src/main/resources</dir>
              <includes>fester_messages.xml</includes>
              <includes>checkstyle.xml</includes>
              <includes>logback.xml</includes>
            </validationSet>
            <validationSet>
              <dir>src/test/resources</dir>
              <includes>logback-test.xml</includes>
            </validationSet>
          </validationSets>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>linux-os</id>
      <activation>
        <os>
          <family>unix</family>
          <arch>amd64</arch>
        </os>
      </activation>
      <dependencies>
        <dependency>
          <groupId>io.netty</groupId>
          <artifactId>netty-transport-native-epoll</artifactId>
          <version>${netty.epoll.version}</version>
          <classifier>linux-x86_64</classifier>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>debug</id>
      <properties>
        <forkCount>0</forkCount>
        <jdwp.client.config>-agentlib:jdwp=transport=dt_socket,address=host.testcontainers.internal:${jdwp.host.port},suspend=n</jdwp.client.config>
      </properties>
    </profile>

    <profile>
      <id>runDebug</id>
      <properties>
        <maven.test.skip>true</maven.test.skip>
        <jacoco.skip>true</jacoco.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-logging-config-for-testing</id>
                <phase>test</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/classes/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/main/resources</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>fester.yaml</include>
                      </includes>
                    </resource>
                    <resource>
                      <directory>${basedir}</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>logback-test.xml</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>copy-application-config-for-testing</id>
                <phase>test</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/test-classes/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/test/resources</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>test-config.properties</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>io.reactiverse</groupId>
            <artifactId>vertx-maven-plugin</artifactId>
            <version>${vertx.plugin.version}</version>
            <executions>
              <execution>
                <id>vertx-plugin</id>
                <phase>test</phase>
                <goals>
                  <goal>debug</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <debugPort>${fester.debug.port}</debugPort>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>live</id>
      <properties>
        <maven.test.skip>true</maven.test.skip>
        <jacoco.skip>true</jacoco.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-logging-config-for-testing</id>
                <phase>test</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/classes/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/main/resources</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>fester.yaml</include>
                      </includes>
                    </resource>
                    <resource>
                      <directory>${basedir}</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>logback-test.xml</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>copy-application-config-for-testing</id>
                <phase>test</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/test-classes/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/test/resources</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>test-config.properties</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>io.reactiverse</groupId>
            <artifactId>vertx-maven-plugin</artifactId>
            <version>${vertx.plugin.version}</version>
            <executions>
              <execution>
                <id>vertx-plugin</id>
                <phase>test</phase>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>fluency</id>
      <properties>
        <fluency.core.version>2.4.1</fluency.core.version>
        <fluency.fluentd.version>2.4.1</fluency.fluentd.version>
        <msgpack.core.version>0.8.20</msgpack.core.version>
        <jackson.dataformat.msgpack.version>0.8.20</jackson.dataformat.msgpack.version>
        <logback.more.appenders.version>1.8.0</logback.more.appenders.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.komamitsu</groupId>
          <artifactId>fluency-core</artifactId>
          <version>${fluency.core.version}</version>
        </dependency>
        <dependency>
          <groupId>org.komamitsu</groupId>
          <artifactId>fluency-fluentd</artifactId>
          <version>${fluency.fluentd.version}</version>
        </dependency>
        <dependency>
          <groupId>org.msgpack</groupId>
          <artifactId>msgpack-core</artifactId>
          <version>${msgpack.core.version}</version>
        </dependency>
        <dependency>
          <groupId>org.msgpack</groupId>
          <artifactId>jackson-dataformat-msgpack</artifactId>
          <version>${jackson.dataformat.msgpack.version}</version>
        </dependency>
        <dependency>
          <groupId>com.sndyuk</groupId>
          <artifactId>logback-more-appenders</artifactId>
          <version>${logback.more.appenders.version}</version>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>default</id>
      <activation>
        <property>
          <name>!versions</name>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- A Maven plugin that can build a Docker image with our application -->
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker.maven.plugin.version}</version>
            <configuration>
              <images>
                <image>
                  <!-- Registry account, if supplied, must end in a slash (e.g. "account/") -->
                  <name>${docker.registry.account}${project.artifactId}:%l</name>
                  <build>
                    <dockerFile>${project.basedir}/src/main/docker/Dockerfile</dockerFile>
                    <assembly>
                      <inline>
                        <fileSets>
                          <fileSet>
                            <!-- The directory where we can find our Maven-built artifact -->
                            <directory>${project.basedir}/target/build-artifact</directory>
                            <!-- We don't want directory structure on output, just the artifact -->
                            <outputDirectory>.</outputDirectory>
                            <includes>
                              <include>${project.artifactId}-${project.version}.jar</include>
                            </includes>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>
                  </build>
                </image>
              </images>
              <authConfig>
                <username>${docker.registry.username}</username>
                <password>${docker.registry.password}</password>
              </authConfig>
            </configuration>
            <executions>
              <execution>
                <id>docker-build</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
              <execution>
                <id>docker-deploy</id>
                <phase>deploy</phase>
                <goals>
                  <goal>push</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <includes>
                <include>**/*Test.java</include>
              </includes>
              <excludes>
                <exclude>**/*FT.java</exclude>
                <exclude>**/*IT.java</exclude>
                <exclude>**/*FfT.java</exclude>
              </excludes>
              <systemPropertyVariables>
                <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
                <fester.url>${fester.url}</fester.url>
                <fester.http.port>${http.port}</fester.http.port>
                <vertx-config-path>${project.basedir}/target/test-classes/test-config.properties</vertx-config-path>
                <content.types.user.table>${project.basedir}/src/main/docker/configs/content-types.properties</content.types.user.table>
              </systemPropertyVariables>
              <argLine>${jacoco.agent.arg}</argLine>
              <skipTests>${skipUTs}</skipTests>
              <forkCount>1</forkCount><!-- Multiple forks == multiple containers; should use failsafe, probably -->
            </configuration>
            <executions>
              <execution>
                <id>feature-flags-off</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
                <configuration>
                  <includes>
                    <include>**/*FfOffT.java</include>
                  </includes>
                  <excludes>
                    <exclude>**/*Test.java</exclude>
                    <exclude>**/*IT.java</exclude>
                    <exclude>**/*FT.java</exclude>
                    <exclude>**/*FfOnT.java</exclude>
                  </excludes>
                  <argLine>${jacoco.agent.arg}</argLine>
                  <skipTests>${skipFfTs}</skipTests>
                  <systemPropertyVariables>
                    <fester.logs.output>${seeLogsFfT}</fester.logs.output>
                    <fester.s3.bucket>${fester.s3.bucket}</fester.s3.bucket>
                    <fester.container.tag>${docker.registry.account}${project.artifactId}:${project.version}</fester.container.tag>
                    <feature.flags>https://iiif-manifest-store.s3.amazonaws.com/fester-features-off.conf</feature.flags>
                    <jdwp.host.port>${jdwp.host.port}</jdwp.host.port>
                    <jdwp.client.config>${jdwp.client.config}</jdwp.client.config>
                  </systemPropertyVariables>
                </configuration>
              </execution>
              <execution>
                <id>feature-flags-on</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
                <configuration>
                  <includes>
                    <include>**/*FfOnT.java</include>
                  </includes>
                  <excludes>
                    <exclude>**/*Test.java</exclude>
                    <exclude>**/*IT.java</exclude>
                    <exclude>**/*FT.java</exclude>
                    <exclude>**/*FfOffT.java</exclude>
                  </excludes>
                  <argLine>${jacoco.agent.arg}</argLine>
                  <skipTests>${skipFfTs}</skipTests>
                  <systemPropertyVariables>
                    <fester.logs.output>${seeLogsFfT}</fester.logs.output>
                    <fester.s3.bucket>${fester.s3.bucket}</fester.s3.bucket>
                    <fester.container.tag>${docker.registry.account}${project.artifactId}:${project.version}</fester.container.tag>
                    <feature.flags>https://iiif-manifest-store.s3.amazonaws.com/fester-features-on.conf</feature.flags>
                    <jdwp.host.port>${jdwp.host.port}</jdwp.host.port>
                    <jdwp.client.config>${jdwp.client.config}</jdwp.client.config>
                  </systemPropertyVariables>
                </configuration>
              </execution>
              <execution>
                <id>functional-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
                <configuration>
                  <includes>
                    <include>**/*FT.java</include>
                  </includes>
                  <excludes>
                    <exclude>**/*Test.java</exclude>
                    <exclude>**/*IT.java</exclude>
                    <exclude>**/*FfT.java</exclude>
                  </excludes>
                  <argLine>${jacoco.agent.arg}</argLine>
                  <skipTests>${skipFTs}</skipTests>
                  <systemPropertyVariables>
                    <fester.logs.output>${seeLogsFT}</fester.logs.output>
                    <fester.s3.bucket>${fester.s3.bucket}</fester.s3.bucket>
                    <fester.placeholder.url>${fester.placeholder.url}</fester.placeholder.url>
                    <fester.container.tag>${docker.registry.account}${project.artifactId}:${project.version}</fester.container.tag>
                    <festerize.version>${festerize.version}</festerize.version>
                    <jdwp.host.port>${jdwp.host.port}</jdwp.host.port>
                    <jdwp.client.config>${jdwp.client.config}</jdwp.client.config>
                  </systemPropertyVariables>
                </configuration>
              </execution>
              <execution>
                <id>integration-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
                <configuration>
                  <includes>
                    <include>**/*IT.java</include>
                  </includes>
                  <excludes>
                    <exclude>**/*FT.java</exclude>
                    <exclude>**/*Test.java</exclude>
                    <exclude>**/*FfT.java</exclude>
                  </excludes>
                  <argLine>${jacoco.agent.arg}</argLine>
                  <skipTests>${skipITs}</skipTests>
                  <systemPropertyVariables>
                    <fester.logs.output>${seeLogsIT}</fester.logs.output>
                    <fester.s3.region>${fester.s3.region}</fester.s3.region>
                    <fester.s3.bucket>${fester.s3.bucket}</fester.s3.bucket>
                    <fester.s3.access_key>${fester.s3.access_key}</fester.s3.access_key>
                    <fester.s3.secret_key>${fester.s3.secret_key}</fester.s3.secret_key>
                    <fester.s3.endpoint>${fester.s3.endpoint}</fester.s3.endpoint>
                    <fester.container.tag>${docker.registry.account}${project.artifactId}:${project.version}</fester.container.tag>
                    <jdwp.host.port>${jdwp.host.port}</jdwp.host.port>
                    <jdwp.client.config>${jdwp.client.config}</jdwp.client.config>
                  </systemPropertyVariables>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- A profile that outputs the latest versions of the installed system dependencies -->
    <profile>
      <id>versions</id>
      <activation>
        <property>
          <name>versions</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker.maven.plugin.version}</version>
            <configuration>
              <logStdout>true</logStdout>
              <verbose>true</verbose>
              <images>
                <image>
                  <name>ubuntu-versions:latest</name>
                  <build>
                    <from>ubuntu:${ubuntu.tag}</from>
                    <assembly>
                      <descriptorRef>project</descriptorRef>
                    </assembly>
                    <runCmds>
                      <shell>/maven/src/main/docker/scripts/show_versions.sh</shell>
                    </runCmds>
                    <entryPoint>tail -f /dev/null</entryPoint>
                  </build>
                </image>
              </images>
              <authConfig>
                <username>${docker.registry.username}</username>
                <password>${docker.registry.password}</password>
              </authConfig>
            </configuration>
            <executions>

              <!-- Builds the Docker image -->
              <execution>
                <id>docker-build</id>
                <phase>validate</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <parent>
    <artifactId>freelib-parent</artifactId>
    <groupId>info.freelibrary</groupId>
    <version>6.6.3</version>
  </parent>
</project>
