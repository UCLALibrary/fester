<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>fester</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>IIIF Fester</name>
  <description>A read/write interface for storing and retrieving IIIF manifests</description>
  <url>https://github.com/uclalibrary/fester</url>

  <licenses>
    <license>
      <name>The 3-Clause BSD License</name>
      <url>https://opensource.org/licenses/BSD-3-clause</url>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:uclalibrary/fester.git</connection>
    <developerConnection>scm:git:git@github.com:uclalibrary/fester.git</developerConnection>
    <url>git@github.com:uclalibrary/fester.git</url>
  </scm>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/uclalibrary/fester/issues</url>
  </issueManagement>

  <developers>
    <developer>
      <id>ksclarke</id>
      <name>Kevin S. Clarke</name>
      <email>ksclarke@ksclarke.io</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/New_York</timezone>
    </developer>
    <developer>
      <id>hardyoyo</id>
      <name>Hardy Pottinger</name>
      <email>hpottinger@library.ucla.edu</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
    </developer>
    <developer>
      <id>cachemeoutside</id>
      <name>Anthony Vuong</name>
      <email>avuong@cachemeoutside.io</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
    </developer>
  </developers>

  <properties>
    <vertx.version>3.8.3</vertx.version>
    <opencsv.version>4.6</opencsv.version>
    <slf4j.ext.version>1.7.26</slf4j.ext.version>
    <aws.sdk.version>1.11.478</aws.sdk.version>
    <freelib.utils.version>0.8.10</freelib.utils.version>
    <jiiify.presentation.version>0.1.1</jiiify.presentation.version>

    <!-- Build plug-in versions -->
    <shade.plugin.version>2.4.3</shade.plugin.version>
    <netty.epoll.version>4.1.37.Final</netty.epoll.version>
    <vertx.plugin.version>1.0.18</vertx.plugin.version>
    <codacy.plugin.version>1.0.2</codacy.plugin.version>
    <vertx.super.s3.version>1.2.1</vertx.super.s3.version>
    <jcip.annotations.version>1.0-1</jcip.annotations.version>
    <maven.failsafe.plugin.version>2.18.1</maven.failsafe.plugin.version>
    <xml.maven.plugin.version>0.9.2</xml.maven.plugin.version>

    <!-- Name of the main Vert.x verticle -->
    <main.verticle>edu.ucla.library.iiif.fester.verticles.MainVerticle</main.verticle>

    <!-- Whether the test instances started with the 'live' profile reloads code automatically -->
    <live.test.reloads>false</live.test.reloads>

    <!-- AWS configuration properties -->
    <fester.s3.region>us-east-1</fester.s3.region>
    <fester.s3.bucket>iiif-fester</fester.s3.bucket>
    <fester.s3.access_key>YOUR_ACCESS_KEY</fester.s3.access_key>
    <fester.s3.secret_key>YOUR_SECRET_KEY</fester.s3.secret_key>

    <!-- The port Fester listens on -->
    <fester.http.port>8888</fester.http.port>
  </properties>

  <dependencies>

    <!-- Vert.x is a toolkit for building reactive applications on the JVM -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web</artifactId>
      <version>${vertx.version}</version>
    </dependency>

    <!-- Library for working with v.2 IIIF manifests -->
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>jiiify-presentation</artifactId>
      <version>${jiiify.presentation.version}</version>
    </dependency>

    <!-- OpenAPI for Vert.x - https://vertx.io/docs/vertx-web-api-contract/java/ -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-api-contract</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <!-- Below is a dependency that needs updating due to security issue (may be able to remove in future) -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-ext</artifactId>
      <version>${slf4j.ext.version}</version>
    </dependency>

    <!-- A Vert.x plug-in for more flexible configuration control -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-config</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>freelib-utils</artifactId>
      <version>${freelib.utils.version}</version>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-s3</artifactId>
      <version>${aws.sdk.version}</version>
    </dependency>
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>vertx-super-s3</artifactId>
      <version>${vertx.super.s3.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>${opencsv.version}</version>
    </dependency>

    <!-- Below dependencies only used for testing -->
    <dependency>
      <groupId>com.github.stephenc.jcip</groupId>
      <artifactId>jcip-annotations</artifactId>
      <version>${jcip.annotations.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-unit</artifactId>
      <version>${vertx.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-client</artifactId>
      <version>${vertx.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>

    <plugins>
      <!-- The build-helper plug-in gets us a dynamic port for testing -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>
      <!--<![CDATA[
        To run the generate-codes plugin outside of a full build, run:
         mvn info.freelibrary:freelib-utils:generate-codes -DmessageFiles=src/main/resources/fester_messages.xml
        Bash shell users can run the shorter form:
         mvn info.freelibrary:freelib-utils:generate-codes -DmessageFiles=$(find src -name *_messages.xml)
      ]]>-->
      <plugin>
        <groupId>info.freelibrary</groupId>
        <artifactId>freelib-utils</artifactId>
        <version>${freelib.utils.version}</version>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>generate-codes</goal>
            </goals>
            <configuration>
              <generatedSourcesDirectory>${project.basedir}/src/main/generated</generatedSourcesDirectory>
              <messageFiles>
                <messageFile>${project.basedir}/src/main/resources/fester_messages.xml</messageFile>
              </messageFiles>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-web-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/classes/webroot</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/webroot</directory>
                </resource>
                <resource>
                  <directory>${basedir}/src/main/resources</directory>
                  <includes>
                    <include>fester.yaml</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- PMD is an extensible cross-language static code analyzer -->
      <plugin>
        <artifactId>maven-pmd-plugin</artifactId>
      </plugin>

      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>info.freelibrary</groupId>
            <artifactId>freelib-resources</artifactId>
            <version>${freelib.resources.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <stylesheetfile>javadocs.css</stylesheetfile>
          <nonavbar>true</nonavbar>
          <show>public</show>
          <nosince>true</nosince>
          <notimestamp>true</notimestamp>
          <bottom>Â </bottom>
          <detectLinks>false</detectLinks>
          <additionalJOptions>
            <additionalJOption>-J-Dhttp.agent=maven-javadoc-plugin-${project.name}</additionalJOption>
          </additionalJOptions>
          <links>
            <link>https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/</link>
            <!-- <link>https://vertx.io/docs/apidocs/</link> -->
          </links>
          <sourcepath>src/main/java:src/main/generated</sourcepath>
        </configuration>
        <executions>
          <execution>
            <id>site-javadocs</id>
            <phase>site</phase>
            <goals>
              <goal>javadoc</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Checkstyle ensures adherence to coding standards -->
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <consoleOutput>true</consoleOutput>
          <logViolationsToConsole>true</logViolationsToConsole>
          <violationSeverity>warning</violationSeverity>
          <includeTestSourceDirectory>true</includeTestSourceDirectory>
          <!-- Override rules until upstream project is updated -->
          <configLocation>${basedir}/src/main/resources/checkstyle.xml</configLocation>
        </configuration>
      </plugin>

      <!-- Enforcer enforces some basic characteristics of the project -->
      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-java</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <version>[1.11.0,)</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Codacy runs automated code reviews and code analytics -->
      <plugin>
        <groupId>com.gavinmogan</groupId>
        <artifactId>codacy-maven-plugin</artifactId>
        <version>${codacy.plugin.version}</version>
      </plugin>

      <!-- Maven dependency helps freelib-resources copy files into the project -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-dependency-analyzer</artifactId>
            <version>${maven.dependency.analyzer.version}</version>
            <exclusions>
              <exclusion>
                <artifactId>maven-project</artifactId>
                <groupId>org.apache.maven</groupId>
              </exclusion>
            </exclusions>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>unpack-build-resources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>info.freelibrary</groupId>
                  <artifactId>freelib-resources</artifactId>
                  <version>${freelib.resources.version}</version>
                  <type>jar</type>
                  <includes>eclipse/**/*,checkstyle/**/*,pmd/**/*,travis/**/*</includes>
                  <outputDirectory>${basedir}/target/build-resources</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Surefire runs the project's unit tests -->
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>**/*IT.java</exclude>
            <exclude>**/*IntegrationTest.java</exclude>
          </excludes>
          <systemPropertyVariables>
            <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
            <fester.http.port>${http.port}</fester.http.port>
            <vertx-config-path>${project.basedir}/target/test-classes/test-config.properties</vertx-config-path>
          </systemPropertyVariables>
          <argLine>${jacoco.agent.arg}</argLine>
        </configuration>
      </plugin>

      <!-- Failsafe runs the project's integration tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <includes>
            <include>**/*IT.java</include>
            <include>**/*IntegrationTest.java</include>
          </includes>
          <excludes>
            <exclude>**/*.xml</exclude>
            <exclude>**/*.md</exclude>
          </excludes>
          <systemPropertyVariables>
            <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
            <fester.http.port>${http.port}</fester.http.port>
            <vertx-config-path>${project.basedir}/target/test-classes/test-config.properties</vertx-config-path>
          </systemPropertyVariables>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Jacoco does code coverage for the test suite -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
      </plugin>

      <!-- The Vert.x plug-in enables running the application from within Maven for development -->
      <plugin>
        <groupId>io.reactiverse</groupId>
        <artifactId>vertx-maven-plugin</artifactId>
        <version>${vertx.plugin.version}</version>
        <executions>
          <execution>
            <id>vertx-plugin</id>
            <goals>
              <goal>initialize</goal>
              <goal>package</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <verticle>${main.verticle}</verticle>
          <redeploy>${live.test.reloads}</redeploy>
          <runArgs>
            <runArg>-Dvertx-config-path=${project.basedir}/target/test-classes/test-config.properties</runArg>
            <runArg>-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory</runArg>
          </runArgs>
        </configuration>
      </plugin>

      <!-- The shade plug-in generates an all-in-one executable Jar file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${shade.plugin.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer
                  implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>io.vertx.core.Launcher</Main-Class>
                    <Main-Verticle>${main.verticle}</Main-Verticle>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>
                </transformer>
              </transformers>
              <artifactSet>
                <!-- Exclude duplicate dependencies so we don't see the warning messages; alphabetize! -->
                <excludes>
                  <exclude>aopalliance:aopalliance</exclude>
                  <exclude>ch.qos.cal10n:cal10n-api</exclude>
                  <exclude>ch.qos.logback:logback-classic</exclude>
                  <exclude>ch.qos.logback:logback-core</exclude>
                  <exclude>com.amazonaws:aws-java-sdk-core</exclude>
                  <exclude>com.amazonaws:aws-java-sdk-kms</exclude>
                  <exclude>com.amazonaws:aws-java-sdk-s3</exclude>
                  <exclude>com.amazonaws:jmespath-java</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-annotations</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-core</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-databind</exclude>
                  <exclude>com.fasterxml.jackson.dataformat:jackson-dataformat-cbor</exclude>
                  <exclude>com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</exclude>
                  <exclude>com.fasterxml.jackson.datatype:jackson-datatype-jdk8</exclude>
                  <exclude>com.github.dblock:oshi-core</exclude>
                  <exclude>com.github.fge:btf</exclude>
                  <exclude>com.github.fge:jackson-coreutils</exclude>
                  <exclude>com.github.fge:json-patch</exclude>
                  <exclude>com.github.fge:msg-simple</exclude>
                  <exclude>com.github.fge:uri-template</exclude>
                  <exclude>com.github.java-json-tools:json-schema-core</exclude>
                  <exclude>com.github.java-json-tools:json-schema-validator</exclude>
                  <exclude>com.google.code.findbugs:jsr305</exclude>
                  <exclude>com.google.errorprone:error_prone_annotations</exclude>
                  <exclude>com.google.guava:failureaccess</exclude>
                  <exclude>com.google.guava:guava</exclude>
                  <exclude>com.google.inject:guice</exclude>
                  <exclude>com.google.j2objc:j2objc-annotations</exclude>
                  <exclude>com.googlecode.libphonenumber:libphonenumber</exclude>
                  <exclude>com.networknt:json-schema-validator</exclude>
                  <exclude>commons-beanutils:commons-beanutils</exclude>
                  <exclude>commons-collections:commons-collections</exclude>
                  <exclude>commons-codec:commons-codec</exclude>
                  <exclude>commons-io:commons-io</exclude>
                  <exclude>commons-logging:commons-logging</exclude>
                  <exclude>info.freelibrary:freelib-utils</exclude>
                  <exclude>info.freelibrary:jiiify-presentation</exclude>
                  <exclude>info.freelibrary:vertx-pairtree</exclude>
                  <exclude>io.netty:netty-buffer</exclude>
                  <exclude>io.netty:netty-codec-dns</exclude>
                  <exclude>io.netty:netty-codec-http2</exclude>
                  <exclude>io.netty:netty-codec-http</exclude>
                  <exclude>io.netty:netty-codec-socks</exclude>
                  <exclude>io.netty:netty-codec</exclude>
                  <exclude>io.netty:netty-common</exclude>
                  <exclude>io.netty:netty-handler-proxy</exclude>
                  <exclude>io.netty:netty-handler</exclude>
                  <exclude>io.netty:netty-resolver-dns</exclude>
                  <exclude>io.netty:netty-resolver</exclude>
                  <exclude>io.netty:netty-transport</exclude>
                  <exclude>io.netty:netty-transport-native-epoll</exclude>
                  <exclude>io.netty:netty-transport-native-unix-common</exclude>
                  <exclude>io.swagger.core.v3:swagger-annotations</exclude>
                  <exclude>io.swagger.core.v3:swagger-core</exclude>
                  <exclude>io.swagger.core.v3:swagger-models</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser-core</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser-v2-converter</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser-v3</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser</exclude>
                  <exclude>io.swagger:swagger-annotations</exclude>
                  <exclude>io.swagger:swagger-compat-spec-parser</exclude>
                  <exclude>io.swagger:swagger-core</exclude>
                  <exclude>io.swagger:swagger-models</exclude>
                  <exclude>io.swagger:swagger-parser</exclude>
                  <exclude>io.vertx:vertx-auth-common</exclude>
                  <exclude>io.vertx:vertx-bridge-common</exclude>
                  <exclude>io.vertx:vertx-config</exclude>
                  <exclude>io.vertx:vertx-core</exclude>
                  <exclude>io.vertx:vertx-web-api-contract</exclude>
                  <exclude>io.vertx:vertx-web-common</exclude>
                  <exclude>io.vertx:vertx-web</exclude>
                  <exclude>javax.activation:activation</exclude>
                  <exclude>javax.annotation:jsr250-api</exclude>
                  <exclude>javax.enterprise:cdi-api</exclude>
                  <exclude>javax.inject:javax.inject</exclude>
                  <exclude>javax.mail:mailapi</exclude>
                  <exclude>javax.validation:validation-api</exclude>
                  <exclude>javax.xml.bind:jaxb-api</exclude>
                  <exclude>joda-time:joda-time</exclude>
                  <exclude>net.iharder:base64</exclude>
                  <exclude>net.java.dev.jna:jna-platform</exclude>
                  <exclude>net.java.dev.jna:jna</exclude>
                  <exclude>net.sf.jopt-simple:jopt-simple</exclude>
                  <exclude>org.apache.commons:commons-collections4</exclude>
                  <exclude>org.apache.commons:commons-lang3</exclude>
                  <exclude>org.apache.commons:commons-text</exclude>
                  <exclude>org.apache.httpcomponents:httpclient</exclude>
                  <exclude>org.apache.httpcomponents:httpcore</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-api</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-impl</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-provider</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-spi</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-util</exclude>
                  <exclude>org.apache.maven.shared:maven-shared-utils</exclude>
                  <exclude>org.apache.maven:maven-artifact</exclude>
                  <exclude>org.apache.maven:maven-builder-support</exclude>
                  <exclude>org.apache.maven:maven-core</exclude>
                  <exclude>org.apache.maven:maven-model-builder</exclude>
                  <exclude>org.apache.maven:maven-model</exclude>
                  <exclude>org.apache.maven:maven-plugin-api</exclude>
                  <exclude>org.apache.maven:maven-repository-metadata</exclude>
                  <exclude>org.apache.maven:maven-resolver-provider</exclude>
                  <exclude>org.apache.maven:maven-settings-builder</exclude>
                  <exclude>org.apache.maven:maven-settings</exclude>
                  <exclude>org.checkerframework:checker-qual</exclude>
                  <exclude>org.codehaus.mojo:animal-sniffer-annotations</exclude>
                  <exclude>org.codehaus.plexus:plexus-classworlds</exclude>
                  <exclude>org.codehaus.plexus:plexus-component-annotations</exclude>
                  <exclude>org.codehaus.plexus:plexus-interpolation</exclude>
                  <exclude>org.codehaus.plexus:plexus-utils</exclude>
                  <exclude>org.eclipse.sisu:org.eclipse.sisu.inject</exclude>
                  <exclude>org.eclipse.sisu:org.eclipse.sisu.plexus.site</exclude>
                  <exclude>org.eclipse.sisu:org.eclipse.sisu.plexus</exclude>
                  <exclude>org.glassfish:javax.json</exclude>
                  <exclude>org.jboss.forge.roaster:roaster-api</exclude>
                  <exclude>org.jboss.forge.roaster:roaster-jdt</exclude>
                  <exclude>org.mozilla:rhino</exclude>
                  <exclude>com.opencsv:opencsv</exclude>
                  <exclude>org.slf4j:slf4j-api</exclude>
                  <exclude>org.slf4j:slf4j-ext</exclude>
                  <exclude>org.sonatype.plexus:plexus-cipher</exclude>
                  <exclude>org.sonatype.plexus:plexus-sec-dispatcher</exclude>
                  <exclude>org.yaml:snakeyaml</exclude>
                  <exclude>software.amazon.ion:ion-java</exclude>
                  <exclude>info.freelibrary:vertx-super-s3</exclude>
                </excludes>
              </artifactSet>
              <outputFile>${project.build.directory}/build-artifact/${project.artifactId}-${project.version}.jar</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- We use the maven-exec-plugin to start the jar before the integration tests and stop the jar afterward -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>start-fester</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>${project.basedir}/src/test/scripts/pre-it-startup.sh</executable>
              <workingDirectory>${project.basedir}/target</workingDirectory>
              <arguments>
                <argument>java</argument>
                <argument>-Dvertx-config-path=${project.build.directory}/test-classes/test-config.properties</argument>
                <argument>-Dfester.http.port=${http.port}</argument>
                <argument>-jar</argument>
                <argument>${project.build.directory}/build-artifact/${project.artifactId}-${project.version}.jar</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>stop-fester</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>${project.basedir}/src/test/scripts/post-it-shutdown.sh</executable>
              <workingDirectory>${project.basedir}/target</workingDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      
      <!--  Validate all XML and XSL in the project during the validate phase -->
      <plugin>
        <groupId>org.openjax.xml</groupId>
        <artifactId>xml-maven-plugin</artifactId>
        <version>${xml.maven.plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>validate</goal>
            </goals>
            <configuration>
              <includes>
                <include>**/*.xsd</include>
                <include>**/*.xml</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      
    </plugins>
  </build>

  <!-- A live testing mode that will spin up the server locally when the following is run: mvn -Plive test -->
  <profiles>
    <profile>
      <id>linux-os</id>
      <activation>
        <os>
          <family>unix</family>
          <arch>amd64</arch>
        </os>
      </activation>
      <dependencies>
        <dependency>
          <groupId>io.netty</groupId>
          <artifactId>netty-transport-native-epoll</artifactId>
          <version>${netty.epoll.version}</version>
          <classifier>linux-x86_64</classifier>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>live</id>
      <properties>
        <maven.test.skip>true</maven.test.skip>
        <jacoco.skip>true</jacoco.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-logging-config-for-testing</id>
                <phase>test</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/classes/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/main/resources</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>logback.xml</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>copy-application-config-for-testing</id>
                <phase>test</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/test-classes/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/test/resources</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>test-config.properties</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.reactiverse</groupId>
            <artifactId>vertx-maven-plugin</artifactId>
            <version>${vertx.plugin.version}</version>
            <executions>
              <execution>
                <id>vertx-plugin</id>
                <phase>test</phase>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <verticle>${main.verticle}</verticle>
              <redeploy>${live.test.reloads}</redeploy>
              <runArgs>
                <runArg>-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory</runArg>
                <runArg>-Dvertx-config-path=target/test-classes/test-config.properties</runArg>
              </runArgs>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <!-- Enables pushing project documentation up to an S3 bucket -->
  <distributionManagement>
    <site>
      <id>s3.site</id>
      <!-- TODO: Create a UCLA S3 bucket for this -->
      <url>s3://projects.freelibrary.info/${project.name}</url>
    </site>
  </distributionManagement>

  <parent>
    <artifactId>freelib-parent</artifactId>
    <groupId>info.freelibrary</groupId>
    <version>3.6.4</version>
  </parent>
</project>
